#!/usr/bin/perl
#socat tcp-listen:50010,reuseaddr,fork file:/dev/ttyUSB0,nonblock,raw,echo=0,b115200

use warnings;
use Socket;
use Fcntl;
use IO::Select;
use IO::Socket;
use Math::BigInt;
use bignum;
#use bignum qw/hex oct/;
use Socket qw(IPPROTO_TCP TCP_NODELAY);


$SIG{'INT'} = 'IGNORE' if(!defined($ENV{FG}));

sub set_unblock
{
my $fd = $_[0];
		if ($^O eq 'MSWin32')
		{
			my $nonblocking = pack('L', 1);
			ioctl($fd, 0x8004667e, unpack('I', pack('P', $nonblocking)));
		}
		else
		{
			fcntl($fd, F_SETFL, fcntl($socket, F_GETFL, 0) | O_NONBLOCK);
		}
}

sub csum { 
	$sum=0;
	for($i=0;$i<length($_[0]);$i++)
	{
		$sum+=ord(substr($_[0],$i,1));
	}
	return $sum&0xff;
}

sub send_to_qemu
{
my ($s,$b)=@_;
my ($ack,$ret);
my $c=csum($b);
send($s,sprintf("+\$$b#%02x",$c),0);
do{
$ret = recv($s, $ack, 1, 0);
} while(!defined($ret));
return $ack;
}

sub recv_from_qemu
{
my ($s,$b,$l)=@_;
my $a='';
my $ret;
while(1)
{
$ret = recv($s, $b, 2048, 0);
$a=$a . $b;
if($a=~/\$(\w+)#\w{2}/)
{
$_[1]=$1;
last
}
}
send ($s,'+',0);
return $ret;
}

sub read_addr
{
my ($s)=@_;
my $b;
send_to_qemu(@_);
recv_from_qemu($s,$b,100,0);
return pack(q(H*),$b);
}

sub read_addr8
{
my ($s,$d)=@_;
my $b;
send_to_qemu($s,sprintf("m%08x,8",$d));
recv_from_qemu($s,$b,100,0);
return unpack("Q",pack(q(H*),$b));
}

sub read_addr4
{
my ($s,$d)=@_;
my $b;
send_to_qemu($s,sprintf("m%08x,4",$d&0xffffffff));
recv_from_qemu($s,$b,100,0);
die "E14" if(substr($b,0,3) eq "E14");
return unpack("I",pack(q(H*),$b));
}

$debugpgd = 0;
$enablesb = defined($ENV{'ENV_memsize'});
$debuginfo = 0;
$enable64 = 0;

sub getpgd
{
	my $curpgd;
	my $addr = $_[0];
	if((($addr)&0xf0000000)==0xc0000000)
	{
		$curpgd=$sym{q(swapper_pg_dir)};
	}
	elsif($debugpgd)
	{
		$curpgd=$debugpgd;
	}
	else
	{
		$curpgd=read_addr4($socket, $sym{q(pgd_current)});
	}
	return  $curpgd;
}

if(@ARGV>=1)
{
for $f ($ARGV[0])
{
 open F, qq(nm $f|);
 local %func;
 map { $func{$_} = 1 } qw(swapper_pg_dir pgd_current module_kallsyms_lookup_name);
 while(<F>)
 {
  my @a = split /\s/, $_;
  if(defined($func{$a[2]}))
  {
  $sym{$a[2]}= Math::BigInt->new("0x" . $a[0]);
  }
 }
  close F;
}

printf qq(swapper_pg_dir %s\n), $sym{q(swapper_pg_dir)}->as_hex() if defined($sym{q(swapper_pg_dir)});
}
exit (0) if(!defined($ENV{FG}) && fork());

$socket = IO::Socket::INET->new(PeerAddr => (@ARGV > 1)?$ARGV[1]:'127.0.0.1:50010');
$server = IO::Socket::INET->new(Listen    => 5,  LocalPort => 9000, Proto     => 'tcp',ReuseAddr=>1);
$client = $server->accept();

setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);
setsockopt($client, IPPROTO_TCP, TCP_NODELAY, 1);

$|=1;


$sel = IO::Select->new( ($socket,$client) );

$pageshift = 12;
$pteshift = 6;

sub accesshelper
{

		my $v;
		($head, $addr, $tail, $pgd) = @_;
		$mask = ((1<<$pageshift)-4);
		$mask1 = ((1<<$pageshift)-8);
		printf("read 0x%x 0x%x\n", $addr, $pgd) if $debuginfo;
#right shift(14+1), left shit log2(2item) : 11 = (14+1-4) (pageshift+1-log2(2item)) 
# 11 = (14-3)
# 12-2
		$pud=read_addr4($socket,(($addr>>(($pageshift-2)*2))&$mask) + $pgd);
		$pte=read_addr4($socket,(($addr>>($pageshift-2)) & $mask1) + $pud);
		$pte1=read_addr4($socket,(($addr>>($pageshift-2)) & $mask1) + 4 + $pud);
		printf("pud=%x pte=%x pte1=%x\n", $pud, $pte, $pte1) if $debuginfo;


		if($addr&(1<<$pageshift))
		{
			$cache = (($pte1>>($pteshift+3))&7)==3;
			if($pte1&(2<<$pteshift))
			{
                         $phyaddr = (($pte1>>($pteshift+6))<<12) + ($addr&((1<<$pageshift)-1));
			 if($phyaddr>=0x20000000)
			 {
				 if(!$enable64)
				 {
					 printf("physical address is too large 0x%x\n",$phyaddr);
					 die("E14");
				 }
				$addr1 = Math::BigInt->new($cache?"0x9800000000000000":"0x9000000000000000") + $phyaddr;
			 }
			 else { $addr1 = ($cache?0x80000000:0xa0000000) + $phyaddr; }
			}
			else
			{
			 return undef;
			}
		}
		else
		{
			$cache = (($pte>>($pteshift+3))&7)==3;
			if($pte&(2<<$pteshift))
			{
                        $phyaddr =  (($pte>>($pteshift+6))<<12)  + ($addr&((1<<$pageshift)-1));

			 if($phyaddr>=0x20000000)
			 {
				 if(!$enable64)
				 {
					 printf("physical address is too large 0x%x\n",$phyaddr);
					 die("E14");
				 }
				$addr1 = Math::BigInt->new($cache?"0x9800000000000000":"0x9000000000000000") + $phyaddr;
			 }
			 else { $addr1 = ($cache?0x80000000:0xa0000000) + $phyaddr; }
			}
			else
			{
			 return undef;
			}
		}

		my $newbuf = sprintf("$head%08x$tail",$addr1);
		$buf=sprintf("\$$newbuf#%02x",csum($newbuf));
		print $buf if $debuginfo;
		return $buf;
}


sub probepte
{
	my ($ins, $i);
	for($i=0x30;$i<0x50;$i=$i+4)
	{
		$ins = read_addr4($socket,0x80000000+$i);
		#srl
		if(($ins & 0xffe0003f) == 2)
		{
			$pteshift = (($ins>>6)&0x1f);
		}
		#mtc0
		if(($ins & 0xffe00000) == 0x40800000)
		{
			last;
		}

	}
}


TOP: while(@ready = $sel->can_read) {
	foreach $fh (@ready) {
		if($fh == $socket) {
			$ret = recv($socket, $buf, 4096, MSG_DONTWAIT);

			if(defined($ret))
			{
				last TOP if !length($buf);
				print $client "$buf";
				#print qq(q: $buf\n);
			}
		}
		else {
			$ret = recv($client, $buf, 4096, MSG_DONTWAIT);
			if(defined($ret))
			{

				last TOP if !length($buf);

				if($buf=~/\$qRcmd,(\w+)#/)
				{
				 my $cmd=pack("H*",qq($1));
				 if($cmd=~/setpgd\s+(\w+)/)
				 {
				 print qq(cmd $cmd $1\n);
				 $debugpgd=Math::BigInt->new($1);
				 print $client q(+$OK#9a);
				 next;
				 }
				 elsif($cmd=~/setpgsize\s+(\w+)/)
				 {
				 print qq(cmd $cmd $1\n);
				 my $pagesize=Math::BigInt->new($1);
				 for($i=12;$i<25;$i++)
				 {
				   last if((1<<$i) == $pagesize);
				 }
				 $pageshift = $i;
				 probepte();
				 print $client q(+$OK#9a);
				 next;
				 }
				 elsif($cmd=~/kernel\s+kallsyms/)
				 {
					 if(defined($sym{q(module_kallsyms_lookup_name)}))
					 {
						my $t = unpack("H*","set \$mykallsyms=1\n");
						 printf $client q(+$%s#%02x),$t,csum($t);
					 }
					 else
					 {
						my $t = unpack("H*","set \$mykallsyms=0\n");
						 printf $client q(+$%s#%02x),$t,csum($t);
					 }
				 next;
				 }
				 elsif($cmd=~/enablesb\s+(\d)/)
				 {
				 $enablesb = $1;
				 print $client q(+$OK#9a);
				 next;
				 }
				 elsif($cmd=~/debug\s+(\d)/)
				 {
				 $debuginfo = $1;
				 print $client q(+$OK#9a);
				 next;
				 }
				 elsif($cmd=~/enable64\s+(\d)/)
				 {
				 $enable64 = $1;
				 print $client q(+$OK#9a);
				 next;
				 }
				 elsif($cmd=~/perl\s+/)
				 {
				  eval substr($cmd,4);	
				 print $client q(+$OK#9a);
				 next;
				 }
				}


			   elsif(defined($sym{q(swapper_pg_dir)}))
			   {
			    eval{
				if($buf=~/\$(m|M)([^,]+)(,[^#]+)#/)
				{
					$cmd=$1;
					$addr=Math::BigInt->new("0x" . $2);
					$tail=$3;
					if((($addr)&0xf0000000)==0xc0000000)
					{
						my $pgd=$sym{q(swapper_pg_dir)};
						$buf = accesshelper($cmd,$addr, $tail, $pgd);
					}
					elsif($addr<0x80000000)
					{

						$buf = accesshelper($cmd, $addr, $tail, getpgd($addr));
					}
				}
				elsif($enablesb && $buf=~/\$z0,(\w+)(,\w+)#/)
				{
					$addr=Math::BigInt->new("0x" . $1);
					$tail=$2;
					$buf = accesshelper("z0,",$addr, $tail, getpgd($addr)) if((($addr)&0xf0000000)==0xc0000000);
				}
				elsif($enablesb && $buf=~/\$Z0,(\w+)(,\w+)#/)
				{
					$addr=Math::BigInt->new("0x" . $1);
					$tail=$2;
					$buf = accesshelper("Z0,",$addr, $tail, getpgd($addr)) if((($addr)&0xf0000000)==0xc0000000);
				}
                               };
                               $buf=undef if($@);
			  }


				if(!defined($buf))
				{
					printf $client q(+$E14#aa);
					next;
				}
				print $socket $buf;
				print qq(g: $buf\n) if $debuginfo;
			}
		}
	}
}



close($socket);
close($client);
close($server);

